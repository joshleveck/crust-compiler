use core::fmt;

#[derive(Debug, PartialEq, Clone)]
pub enum TokenType {
    Num(i32),
    Str(String, usize),
    CharLiteral(String),
    Ident(String),
    Param(usize),
    Arrow,
    Extern,
    Typedef,
    Int,
    Char,
    Void,
    Struct,
    Plus,
    Minus,
    Mul,
    Div,
    And,
    Dot,
    Comma,
    Exclamation,
    Question,
    VerticalBar,
    Caret,
    Colon,
    HashTag,
    If,
    Else,
    For,
    Do,
    While,
    Break,
    EQ,
    NE,
    LE,
    GE,
    Semicolon,
    LeftParen,
    RightParen,
    LeftBracket,
    RightBracket,
    LeftBrace,
    RightBrace,
    LeftAngleBracket,
    RightAngleBracket,
    Equal,
    Logor,
    Logand,
    SHL,
    Inc,
    Dec,
    MulEQ,
    DivEQ,
    ModEQ,
    AddEQ,
    SubEQ,
    ShlEQ,
    ShrEQ,
    BitandEQ,
    XorEQ,
    BitorEQ,
    SHR,
    Mod,
    Return,
    Sizeof,
    Alignof,
    NewLine,
}


impl TokenType {
    pub fn new_single_letter(c: char) -> Option<Self> {
        use self::TokenType::*;
        match c {
            '+' => Some(Plus),
            '-' => Some(Minus),
            '*' => Some(Mul),
            '/' => Some(Div),
            '&' => Some(And),
            '.' => Some(Dot),
            ',' => Some(Comma),
            '!' => Some(Exclamation),
            '?' => Some(Question),
            '|' => Some(VerticalBar),
            '^' => Some(Caret),
            ':' => Some(Colon),
            '#' => Some(HashTag),
            '(' => Some(LeftParen),
            ')' => Some(RightParen),
            '[' => Some(LeftBracket),
            ']' => Some(RightBracket),
            '{' => Some(LeftBrace),
            '}' => Some(RightBrace),
            '<' => Some(LeftAngleBracket),
            '>' => Some(RightAngleBracket),
            '=' => Some(Equal),
            ';' => Some(Semicolon),
            _ => None,
        }
    }
}